{"version":3,"sources":["components/Card.js","components/Score.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","checkGuess","id","alt","src","image","Score","state","score","topScore","clickedIds","images","handleIncrement","_this","setState","handleTopScore","currentId","push","console","log","matches","map","usedId","length","shuffleImages","arr","i","j","temp","Math","floor","random","this","_this2","endGame","components_Card","key","React","Component","App","components_Score","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAceA,MAXf,SAAcC,GACZ,OAEEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,OAAKE,QAAS,kBAAML,EAAMM,WAAWN,EAAMO,KAAKH,UAAU,iBACtDH,EAAAC,EAAAC,cAAA,OAAKK,IAAK,GAAIC,IAAKT,EAAMU,kBC6FtBC,6MA/FbC,MAAQ,CACNC,MAAO,EACPC,SAAS,EACTC,WAAW,GACXC,YAIAC,gBAAkB,WAEhBC,EAAKC,SAAS,CAAEN,MAAOK,EAAKN,MAAMC,MAAQ,OAG5CO,eAAe,WACTF,EAAKN,MAAMC,OAAOK,EAAKN,MAAME,UAC/BI,EAAKC,SAAS,CAACL,SAASI,EAAKN,MAAMC,QAErCK,EAAKC,SAAS,CAACJ,WAAW,QAgBhCT,WAAa,SAACe,GACZH,EAAKC,SAAS,SAAAP,GACZA,EAAMG,WAAWO,KAAKD,KAExBE,QAAQC,IAAIN,EAAKN,MAAMG,YACvB,IAAIU,GAAQ,EAEZP,EAAKN,MAAMG,WAAWW,IAAI,SAACC,GACrBA,IAASN,IACXI,GAAQ,KAGTA,GAEEP,EAAKN,MAAMC,QAAQK,EAAKN,MAAMI,OAAOY,SACtCV,EAAKC,SAAS,CAACN,MAAM,IACrBK,EAAKC,SAAS,CAACL,SAAS,KAE1BI,EAAKC,SAAS,CAACN,MAAM,IACrBK,EAAKE,kBAELF,EAAKD,kBAEPC,EAAKW,cAAcX,EAAKN,MAAMI,sFArCdc,GAEV,IAAIC,EACAC,EACAC,EACJ,IAAKF,EAAID,EAAIF,OAAS,EAAGG,EAAI,EAAGA,IAC5BC,EAAIE,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCE,EAAOH,EAAIC,GACXD,EAAIC,GAAKD,EAAIE,GACbF,EAAIE,GAAKC,EAEb,OAAOH,oCA+BbO,KAAKlB,SAAS,CAACN,MAAM,IACrBwB,KAAKlB,SAAS,CAACL,SAAS,qCAKf,IAAAwB,EAAAD,KACP,OACEpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,+CACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,oCACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,UAAiCiC,KAAKzB,MAAMC,OAC5CZ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,cAAqCiC,KAAKzB,MAAME,WAElDb,EAAAC,EAAAC,cAAA,WACEkC,KAAKzB,MAAMC,QAAQwB,KAAKzB,MAAMI,OAAOY,OACzCS,KAAKE,UAAU,IACbtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACdiC,KAAKzB,MAAMI,OAAOU,IAAI,SAAAhB,GAAK,OAC1BT,EAAAC,EAAAC,cAACqC,EAAD,CACEjC,GAAIG,EAAMH,GACVkC,IAAK/B,EAAMH,GACXG,MAAOA,EAAMA,MACbJ,WAAYgC,EAAKhC,wBAvFToC,IAAMC,WCGXC,MAJf,WACE,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.94ff04ca.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n\n    <div className=\"inner-card d-flex\">\n        <div onClick={() => props.checkGuess(props.id)} className=\"img-container\">\n            <img alt={\"\"} src={props.image} />\n        </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\nimport images from \"../images.json\";\n// By extending the React.Component class, Counter inherits functionality from it\nclass Score extends React.Component {\n  // Setting the initial state of the Counter component\n  state = {\n    score: 0,\n    topScore:0,\n    clickedIds:[],\n    images\n  };\n\n    // handleIncrement increments this.state.count by 1\n    handleIncrement = () => {\n      // We always use the setState method to update a component's state\n      this.setState({ score: this.state.score + 1 });\n    };\n  \n    handleTopScore=()=>{\n      if (this.state.score>=this.state.topScore){\n        this.setState({topScore:this.state.score})\n      }\n      this.setState({clickedIds:[]});\n    }\n    shuffleImages(arr){\n     \n        var i,\n            j,\n            temp;\n        for (i = arr.length - 1; i > 0; i--) {\n            j = Math.floor(Math.random() * (i + 1));\n            temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        return arr;    \n    }\n\ncheckGuess = (currentId)=> {\n  this.setState(state => {\n    state.clickedIds.push(currentId);\n  });\n  console.log(this.state.clickedIds);\n  let matches=false;\n  // eslint-disable-next-line \n  this.state.clickedIds.map((usedId) =>{\n    if (usedId===currentId){\n      matches=true;\n    }\n  });\n  if(matches){\n    \n    if(this.state.score===this.state.images.length){\n      this.setState({score:0});\n      this.setState({topScore:0});\n    }\n    this.setState({score:0});\n    this.handleTopScore();\n  }else{\n    this.handleIncrement();\n  }\n  this.shuffleImages(this.state.images);\n}\n\nendGame(){\n\n  this.setState({score:0})\n  this.setState({topScore:0});\n  \n}\n \n  // The render method returns the JSX that should be rendered\n  render() {\n    return (\n      <div className=\"card text-center\">\n        <div className=\"card-header bg-primary text-white\">\n          <p className=\"card-text\">How well do you know Married With Children?</p>\n          <p className=\"card-text\">Click on each picture only once!</p>\n          <p className=\"card-text\">Score: {this.state.score}</p>\n          <p className=\"card-text\">Top Score: {this.state.topScore}</p>\n        </div>\n        <div>\n        {(this.state.score===this.state.images.length)?\n      this.endGame():\"\"}</div>\n        <div className=\"card-body \">  \n        {this.state.images.map(image => (\n          <Card\n            id={image.id}\n            key={image.id}\n            image={image.image}\n            checkGuess={this.checkGuess}\n          />\n        ))}\n      \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Score;\n","import React from \"react\";\nimport Score from \"./components/Score\";\n\nfunction App() {\n  return <Score />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}